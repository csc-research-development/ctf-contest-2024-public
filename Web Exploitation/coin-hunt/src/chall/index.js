import 'dotenv/config'
import cookieParser from 'cookie-parser'
import express from 'express'
import jwt from 'jsonwebtoken'
import {
	ApiError,
	BadRequestError,
	ForbiddenError,
	NotFoundError,
} from './utils/errors.js'
import { getLastPrice } from './utils/trading-view.js'
import 'express-async-errors'
import helmet from 'helmet'
import { fork } from 'child_process'

const app = express()
const port = 5001
const jwtSecret = process.env.JWT_SECRET || 'your-secret-key'
export const symbol = 'COINBASE:BTCUSD'

app.use(
	helmet({
		contentSecurityPolicy: false,
		xDownloadOptions: false,
	})
)
app.set('view engine', 'ejs')
app.use(express.json())
app.use(cookieParser())
app.use(async (req, res, next) => {
	const session = req.cookies.jwt

	let user
	if (!session) {
		user = {
			name: 'guest',
			cash: 1000,
			totalBalance: 1000,
			items: {},
			assets: {},
		}
		const sessionToken = jwt.sign(user, jwtSecret)
		res.cookie('jwt', sessionToken, {
			path: '/',
			httpOnly: true,
		})
	} else {
		user = jwt.verify(session, jwtSecret)

		if (user.assets[symbol]) {
			const lastPrice = await getLastPrice()

			user.totalBalance =
				user.cash + user.assets[symbol].amount * lastPrice

			user.assets[symbol].changes =
				((lastPrice - user.assets[symbol].avgPrice) /
					user.assets[symbol].avgPrice) *
				100

			user.assets[symbol].lastPrice =
				user.assets[symbol].amount * lastPrice

			res.cookie('jwt', jwt.sign(user, jwtSecret), {
				path: '/',
				httpOnly: true,
			})
		}
	}

	req.user = user
	next()
})

const reports = {}
const items = [
	{
		id: '1',
		name: 'McLaren 720S',
		description: `The McLaren is a high-performance sports car known for its sleek design and powerful engine. It offers an exhilarating driving experience with its advanced technology and precision engineering. Whether you're a car enthusiast or simply looking for a thrilling ride, the McLaren is sure to impress.`,
		image: 'https://media.ed.edmunds-media.com/mclaren/720s-spider/2021/oem/2021_mclaren_720s-spider_convertible_base_fq_oem_1_1600.jpg',
		price: 300000,
	},
	{
		id: '2',
		name: 'Rolex Watch',
		description: `The Rolex Watch is a luxury timepiece known for its precision and elegance. It is crafted with the finest materials and meticulous attention to detail. Whether you're attending a formal event or simply want to make a statement, the Rolex Watch is the perfect accessory.`,
		image: 'https://www.bobswatches.com/rolex-blog/wp-content/uploads/2017/01/Green-Gold-Rolex-GMT-Master.jpg',
		price: 10000,
	},
	{
		id: '3',
		name: 'Apple MacBook Pro',
		description: `The Apple MacBook Pro is a powerful laptop designed for professionals and creatives. It features a stunning Retina display, fast performance, and a sleek design. Whether you're editing videos, coding, or creating graphics, the MacBook Pro is the ultimate tool for productivity.`,
		image: 'https://cdn.eraspace.com/pub/media/mageplaza/blog/post/s/p/spesifikasi_macbook_pro_m3_primary.jpg',
		price: 2000,
	},
	{
		id: '4',
		name: 'Sony PlayStation 5',
		description: `The Sony PlayStation 5 is the latest gaming console from Sony. It offers immersive gaming experiences with its powerful hardware and advanced features. Whether you're a casual gamer or a hardcore enthusiast, the PlayStation 5 delivers stunning graphics and smooth gameplay.`,
		image: 'https://www.psegameshop.com/wp-content/uploads/2020/09/PlayStation-5-Digital-Edition-Console2.jpg',
		price: 500,
	},
	{
		id: '5',
		name: '???',
		description: 'ðŸ’€ðŸ’€ðŸ’€',
		image: '',
		price: 1e21,
	},
]

app.get('/', (req, res) => {
	res.render('index', {
		user: req.user,
		symbol,
	})
})

app.get('/shop', (req, res) => {
	res.render('shop', {
		user: req.user,
		items,
		symbol,
	})
})

app.post('/topup', (req, res) => {
	if (req.user.role !== 'admin') {
		throw new ForbiddenError(
			'for now, because our app is still under development, only admin can topup'
		)
	}

	const { amount } = req.body

	if (!amount || typeof amount !== 'number' || amount < 0) {
		throw new BadRequestError('invalid amount')
	}

	req.user.cash += amount
	res.cookie('jwt', jwt.sign(req.user, jwtSecret), {
		path: '/',
		httpOnly: true,
	})

	res.json({
		msg: 'topup success!',
	})
})

app.post('/shops/buy/:id', (req, res) => {
	const { id } = req.params
	const item = items.find((item) => item.id === id)

	sendPerformanceReport(req)

	if (!item) {
		throw new NotFoundError('item id not found :(')
	}

	if (req.user.cash < item.price && req.user.role !== 'admin') {
		throw new BadRequestError('not enough money :(')
	}

	req.user.cash -= item.price

	if (req.user.items[id]) req.user.items[id] += 1
	else req.user.items[id] = 1

	res.cookie('jwt', jwt.sign(req.user, jwtSecret), {
		path: '/',
		httpOnly: true,
	})

	res.json({
		msg:
			item.name === '???'
				? 'part 1: CSC{g4Cor_cuyy'
				: `buy ${item.name} success!`,
	})
})

function sendPerformanceReport(req) {
	const { id } = req.params
	if (id.includes('_')) {
		throw new BadRequestError('why are you including _ in id params?')
	}
	if (!reports[id]) {
		reports[id] = {
			time: new Date(),
		}
	}
	Object.assign(reports[decodeURI(id)], req.body)

	const child = fork('save-report.js')
	child.send(reports)
}

app.post('/shops/sell/:id', (req, res) => {
	const { id } = req.params

	const item = items.find((item) => item.id === id)
	if (!item) {
		throw new NotFoundError('item id not found :(')
	}

	if (!req.user.items[id]) {
		throw new BadRequestError('you are not owning this item')
	}

	req.user.cash += item.price
	req.user.items[id] -= 1

	if (req.user.items[id] < 1) {
		delete req.user.items[id]
	}

	res.cookie('jwt', jwt.sign(req.user, jwtSecret), {
		path: '/',
		httpOnly: true,
	})

	res.json({
		msg: 'sell item success!',
	})
})

app.post('/assets/buy', async (req, res) => {
	const { amount } = req.body

	if (!amount || typeof amount !== 'number' || amount <= 0) {
		throw new BadRequestError('invalid amount')
	}

	if (req.user.cash < amount) {
		throw new BadRequestError('not enough money :(')
	}

	const price = await getLastPrice()
	const assetAmount = amount / price

	if (!req.user.assets[symbol]) {
		req.user.assets[symbol] = { avgPrice: price, amount: assetAmount }
	} else {
		const { avgPrice, amount } = req.user.assets[symbol]
		const newAmount = amount + assetAmount
		const newAvgPrice =
			(amount * avgPrice + assetAmount * price) / newAmount
		req.user.assets[symbol] = { avgPrice: newAvgPrice, amount: newAmount }
	}

	req.user.cash -= amount

	res.cookie('jwt', jwt.sign(req.user, jwtSecret), {
		path: '/',
		httpOnly: true,
	})

	res.json({ msg: 'OK' })
})

app.post('/assets/sell', async (req, res) => {
	const { amount } = req.body

	if (!amount || typeof amount !== 'number' || amount <= 0) {
		throw new BadRequestError('invalid amount')
	}

	if (!req.user.assets[symbol]) {
		throw new BadRequestError('you have not bought this asset yet')
	}

	const { amount: assetAmount } = req.user.assets[symbol]

	const lastPrice = await getLastPrice()

	const multiplier = amount / (assetAmount * lastPrice)
	if (multiplier > 1) {
		throw new BadRequestError('amount is bigger than you have')
	}

	if (multiplier == 1) {
		delete req.user.assets[symbol]
	} else {
		req.user.assets[symbol].amount -=
			req.user.assets[symbol].amount * multiplier
	}

	req.user.cash += amount

	res.cookie('jwt', jwt.sign(req.user, jwtSecret), {
		path: '/',
		httpOnly: true,
	})

	res.json({ msg: 'OK' })
})

app.all('*', (req, res, next) => {
	const err = new NotFoundError(
		`Can't find ${req.originalUrl} on this server!`
	)
	next(err)
})

app.use((err, req, res, next) => {
	console.error(err.stack)
	if (err instanceof ApiError) {
		res.status(err.status).json({ error: err.message })
		return
	}
	res.status(500).json({ msg: 'Internal Server Error' })
})

app.listen(port, () => {
	console.log(`Server running at http://localhost:${port}`)
})
